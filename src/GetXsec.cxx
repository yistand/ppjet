//======================================================================================================================================================
//

//		2016.07.23	Li Yi
//		GetXsec.cxx
//		Read in Kevin's Cross Section files and merge the values from various files
//		column 1: filename
//		column 2: cross section 
//		column 3: generated events
//		Email from Kevin:
//		 What you should do is take the cross sections for each partonic pT bin, and do a weighted average using the number of events as the weight (column 3), which will give you the cross section for that partonic pT bin. Then you add up all events in column three for the given partonic pT bin. So you will have 2 sets of 11 numbers, one set for cross sections, and one set for number of events. I like to store these in arrays for ROOT macros when I have to weight by the luminosity.
//
//		 With these numbers in hand what you want to do is weight by the luminosity for each partonic pT bin. So if you have files (histograms) from each partonic pT bin, then what you will do is add them up, and weight each one of them by:
//
//    			Double_t binLumi = (numEvents[iBin]*crossSection[10])/(crossSection[iBin]*numEvents[10]);
//    			Double_t binWt = 1./binLumi
//
//		 So I normalize my luminosity to the highest bin, you don't NEED to do this, I just prefer plotting this way. Then I weight the histogram by 1/binLumi. 
//
//
//======================================================================================================================================================
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <ctime>


using namespace std;

int main() {

	std::cout.precision(10);

	const int NpT = 11;
	string ptbin[NpT] = {"2_3","3_4","4_5","5_7","7_9","9_11","11_15","15_20","20_25","25_35","35_-1"};

	ifstream fin;
	string line;

	float totalevent[NpT]={0};	
	float avexsec[NpT]={0};

	for(int i = 0; i<NpT; i++) {
		string infilename="";
		infilename+="/home/fas/caines/ly247/Scratch/embedPythia/160726/CrossSectionFiles/pt";
		infilename+=ptbin[i];
		infilename+=".xSec.txt";
		//cout<<"read "<<infilename<<endl;
		fin.open(infilename.data());
		if(fin.is_open()) {
			float totalxsec = 0;
			while(getline(fin,line)) {
				string buf;
				stringstream ss(line);
				float icrosssec = 0;
				float ievent = 0;
				string ifilename;
				ss >> ifilename >> icrosssec >> ievent ;
				//cout << ifilename <<"\t"<< icrosssec <<"\t"<< ievent << endl;
				totalevent[i]+=ievent;
				totalxsec+=icrosssec*ievent;
			}
			avexsec[i]= (totalevent[i]>0? totalxsec/totalevent[i]:0);
			//cout<<"summary:"<<endl;
			cout<<"pt"<<ptbin[i]<<"\t"<<avexsec[i]<<"\t"<<totalevent[i]<<endl;
		}
		fin.close();
	}

	
	ofstream fout;
	fout.open("include/CrossSectionPerpT.h",std::ofstream::out);
	cout <<"Writing to file CrossSectionPerpT.h"<<endl; 

	fout.precision(10);


	time_t now=time(0);
	char* dt = ctime(&now);	// convert to string
	fout << "//Automatically generated by GetXsec.cxx at "<<dt <<endl << endl;
	fout << "#ifndef __PPCROSSSECPERPT\n#define __PPCROSSSECPERPT" << endl << endl;
	fout << "const int NUMBEROFPT = 11;"<<endl;
	fout << "const char *PTBINS[NUMBEROFPT]={\"2_3\",\"3_4\",\"4_5\",\"5_7\",\"7_9\",\"9_11\",\"11_15\",\"15_20\",\"20_25\",\"25_35\",\"35_-1\"};" <<endl;
	fout << "float XSEC[NUMBEROFPT] = {";
	for(int i = 0; i<NpT-1; i++) {
		fout << avexsec[i] << ", ";
	}
	fout << avexsec[NpT-1] << "};" << endl;
	fout << "float NUMBEROFEVENT[NUMBEROFPT] = {";
	for(int i = 0; i<NpT-1; i++) {
		fout << totalevent[i] << ", ";	
	}
	fout << totalevent[NpT-1] << "};" << endl;
	fout << endl << "#endif // __PPCROSSSECPERPT" << endl;
	fout.close();


	return 1;

}
